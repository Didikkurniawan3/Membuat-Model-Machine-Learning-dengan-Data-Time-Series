# -*- coding: utf-8 -*-
"""Submission Dicoding Proyek Kedua : Membuat Model Machine Learning dengan Data Time Series.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z6oExlhwQg1GLsaZo-AJIGFE3lr3BbBb

**Submission Dicoding Proyek Kedua : Membuat Model Machine Learning dengan Data Time Series**

Nama : Didik Kurniawan

Username Dicoding : didik_kurniawan_slVA

Email : didik2584@gmail.com
"""

!wget --no-check-certificate \
  https://archive.ics.uci.edu/ml/machine-learning-databases/00275/Bike-Sharing-Dataset.zip \
  -O /content/Bike-Sharing-Dataset.zip

"""**Import library yang akan digunakan**"""

import pandas as pd
import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf

"""**Membaca & mengekstak file dataset**"""

from zipfile import ZipFile
import os

local_zip = '/content/Bike-Sharing-Dataset.zip'
zip_ref = ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp')
zip_ref.close()

"""**Menampilkan listnya**"""

os.listdir('/content')

"""** membaca file dan menampilkan DataFram**"""

dt_hour = pd.read_csv('/tmp/hour.csv', index_col='dteday')
dt_hour

"""**Menampilkan 10 data teratas**"""

dt_hour.head(10)

"""**Melihat 10 data terbawah**"""

dt_hour.tail(10)

"""**Melihat total data**"""

dt_hour.shape

"""**Mendapatkan jumlah total nilai NaN di DataFrame**"""

dt_hour.isnull().sum()

"""**Melihat informasi dari data**"""

dt_hour.info()

"""**Menampilkan 5 data pertama**"""

dt_hour.head()

import tensorflow as tf

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

mnth = dt_hour['mnth'].values
cnt = dt_hour['cnt'].values

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(mnth,cnt,test_size = 0.2, random_state = 0 , shuffle=False)
print(len(x_train), len(x_test))

from keras.layers import Dense, LSTM

data_x_train = windowed_dataset(x_train, window_size=60, batch_size=80, shuffle_buffer=1000)
data_x_test = windowed_dataset(x_test, window_size=60, batch_size=80, shuffle_buffer=1000)

model = tf.keras.models.Sequential([
  tf.keras.layers.Conv1D(filters=32, kernel_size=5,
                      strides=1, padding="causal",
                      activation="relu",
                      input_shape=[None, 1]),
  tf.keras.layers.LSTM(64, return_sequences=True),
  tf.keras.layers.LSTM(64, return_sequences=True),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
  tf.keras.layers.Lambda(lambda x: x * 400)
])

lr_schedule = tf.keras.callbacks.LearningRateScheduler(
    lambda epoch: 1e-8 * 10**(epoch / 20))
optimizer = tf.keras.optimizers.SGD(lr=1e-8, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

x = (90.0 - 1.0) * (10 / 100)
print(x)

"""**callback**"""

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')< x):
      self.model.stop_training = True
      print("\nMAE of the model < 10% of data scale")
callbacks = myCallback()

tf.keras.backend.set_floatx('float64')
history = model.fit(data_x_train ,epochs=30, validation_data=data_x_test, callbacks=[callbacks])

"""**plot of mae**"""

import matplotlib.pyplot as plt

plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('MAE')
plt.ylabel('mae')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

"""**plot of loss**"""

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()